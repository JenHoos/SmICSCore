
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Text;
using System.Globalization;

namespace ConsoleApp_00004
{
    // This class runs the RKI DOD Algorithm (DOD = Disease Outbreak Detection)
    // using RScriptRunner class.
    public class DODInterface
    {
        // This method calls RScriptRunner.
        //
        //CAUTION: Particularly this method doesn't use any AQL yet.
        //         It's only for local use.
        //
        // Input parameters:
        // path_of_r_script     [string] : Path to the R transfer script.
        // epochs_and_observed  [int]    : 2D array with [0]: epochs and [1]: observed.
        // num_of_epochs        [int]    : Number of epochs in the DOD STS Data Structure.
        // num_of_inOutbreak    [int]    : Number of items in a variable in the DOD STS Data Structure.
        // json_out_file_name   [string] : Output JSON-file name with items for the DOD STS Data Structure.
        //                                 Important: Must be the same as in R transfer file.
        // r_transfer_file_name [string] : Name of the R transfer file.
        // path_of_r_exec       [string] : Path to the Rscript.exe.
        // r_out_file_name      [string] : Name of the JSON-file with the DOD algorithm computation results generated by
        //                                 the R transfer file.
        //                                 Important: Must be the same as in R transfer file.
        // rParameter           [string] : Parameter for the DOD Algorithm.
        //
        public static void RunDODAlgorithm(string path_of_r_script, int[][] epochs_and_observed, int num_of_epochs, int num_of_inOutbreak, string json_out_file_name, string r_transfer_file_name, string path_of_r_exec, string r_out_file_name, string rParameter)
        {
            //throw new NotImplementedException();

            //BEGIN Define Variables
            string path_00 = path_of_r_script; //"C:\\Users\\Nikolaus Kopernikus\\Ordner\\myDev\\0006_R\\";

            DateTime startingDate = (new DateTime(1970, 1, 1)).AddDays(epochs_and_observed[0][0]); //PW20210222__DateTime startingDate = (new DateTime(1970, 1, 1)).AddDays(epochs_and_observed[0/2][0]);
            int startingYear = startingDate.Year;
            int startingWeek = DateTimeFormatInfo.CurrentInfo.Calendar.GetWeekOfYear(startingDate, DateTimeFormatInfo.CurrentInfo.CalendarWeekRule, DateTimeFormatInfo.CurrentInfo.FirstDayOfWeek);

            int[] epochs_00 = epochs_and_observed[0]; //PW20210222__int[] epochs_00 = epochs_and_observed[0/2];
            int freq_00 = 365; //PW20210217__365; //PW20210215__52; //PW20210211__0;
            int[] start_00 = {startingYear, startingWeek}; //PW20210215_1321_new int[2];
            int[] observed_00 = epochs_and_observed[1]; //PW20210222__int[] observed_00 = epochs_and_observed[1/3];
            int[] state_00 = new int[num_of_epochs];
            string neighbourhood_00 = null;
            double[] populationFrac_00 = new double[num_of_epochs];
            int[] inOutbreak_00 = new int[num_of_inOutbreak];
            bool epochAsDate_00 = true;
            bool multinomialTS_00 = false;

            string out_file_name_00 = json_out_file_name;

            //Variables for Running an R-Script
            string file_name_01 = r_transfer_file_name;

            string path_02 = path_of_r_exec;
            string exec_name_01 = "Rscript.exe";
            //END Define Variables

            for(int o = 0; o < num_of_epochs; o++)
            {
                populationFrac_00[o] = 1.0;
            }

            for(int o = 0; o < num_of_inOutbreak; o++)
            {
                inOutbreak_00[o] = 0;
            }

            //BEGIN Create a DOD-conform JSON object with readed data
            StringBuilder sb_00 = new StringBuilder();
            StringWriter sw_00 = new StringWriter(sb_00);

            using (JsonWriter writer_00 = new JsonTextWriter(sw_00))
            {
                writer_00.Formatting = Formatting.Indented;

                writer_00.WriteStartObject();

                writer_00.WritePropertyName("epoch");
                writer_00.WriteStartArray();
                for (int o = 0; o < num_of_epochs; o++)
                {
                    writer_00.WriteValue(epochs_00[o]);
                }
                writer_00.WriteEndArray();
                //
                writer_00.WritePropertyName("freq");
                writer_00.WriteValue(freq_00);
                //
                writer_00.WritePropertyName("start");
                writer_00.WriteStartArray();
                writer_00.WriteValue(start_00[0]);
                writer_00.WriteValue(start_00[1]);
                writer_00.WriteEndArray();
                //
                writer_00.WritePropertyName("observed");
                writer_00.WriteStartArray();
                for (int o = 0; o < num_of_epochs; o++)
                {
                    writer_00.WriteValue(observed_00[o]);
                }
                writer_00.WriteEndArray();
                //
                writer_00.WritePropertyName("state");
                writer_00.WriteStartArray();
                for (int o = 0; o < num_of_epochs; o++)
                {
                    writer_00.WriteValue(state_00[o]);
                }
                writer_00.WriteEndArray();
                //
                writer_00.WritePropertyName("populationFrac");
                writer_00.WriteStartArray();
                for (int o = 0; o < num_of_epochs; o++)
                {
                    writer_00.WriteValue(populationFrac_00[o]);
                }
                writer_00.WriteEndArray();
                //
                writer_00.WritePropertyName("inOutbreak");
                writer_00.WriteStartArray();
                for (int o = 0; o < num_of_inOutbreak; o++)
                {
                    writer_00.WriteValue(inOutbreak_00[o]);
                }
                writer_00.WriteEndArray();
                //
                writer_00.WritePropertyName("epochAsDate");
                writer_00.WriteValue(epochAsDate_00);
                //
                writer_00.WritePropertyName("multinomialTS");
                writer_00.WriteValue(multinomialTS_00);

                writer_00.WriteEndObject();
            }

            //BEGIN Write JSON-Object to JSON-File
            //if (true && !true)
            if (true)
            {
                File.WriteAllText(path_00 + out_file_name_00, sb_00.ToString());
            }
            //END Write JSON-Object to JSON-File

            //END Create a DOD-conform JSON object with readed data

            //BEGIN Testing with a salBerlin_new data set
            if (!true)
            {
                /*
                O:\Eigene Dateien\Arbeitsverzeichnis\Backup_SmICS\K_DODInterface_210106_1332.cs
                //
                */
                string inp_file_name_00 = "SK_00_Berlin_Mitte.dat";
                inp_file_name_00 = "SK_06_Berlin_Berlin_Neukoelln.dat";
                inp_file_name_00 = "SK_01_Berlin_Lichtenberg.dat";

                int test_num_of_epochs = 417;
                int test_num_of_inOutbreak = 887;

                int[] test_epochs_00 = new int[test_num_of_epochs];
                int test_freq_00 = 0;
                int[] test_start_00 = new int[2];
                int[] test_observed_00 = new int[test_num_of_epochs];
                int[] test_state_00 = new int[test_num_of_epochs];
                string test_neighbourhood_00 = null;
                double[] test_populationFrac_00 = new double[test_num_of_epochs];
                int[] test_inOutbreak_00 = new int[test_num_of_inOutbreak];
                bool test_epochAsDate_00 = true;
                bool test_multinomialTS_00 = false;

                string test_out_file_name_00 = json_out_file_name;
                string current_line;

                try
                {
                    System.IO.StreamReader inp_file_00 = new System.IO.StreamReader(path_00 + inp_file_name_00);

                    for(int o = 0; o < test_num_of_epochs; o++)
                    {
                        current_line = inp_file_00.ReadLine();

                        test_epochs_00[o] = (int) Convert.ToInt64(current_line.Substring(0, 8));
                    }
                    //
                    test_freq_00 = (int) Convert.ToInt64(inp_file_00.ReadLine().Substring(0, 8));
                    //
                    test_start_00[0] = (int) Convert.ToInt64(inp_file_00.ReadLine().Substring(0, 8));
                    test_start_00[1] = (int) Convert.ToInt64(inp_file_00.ReadLine().Substring(0, 8));
                    //
                    for(int o = 0; o < test_num_of_epochs; o++)
                    {
                        current_line = inp_file_00.ReadLine();

                        test_observed_00[o] = (int) Convert.ToInt64(current_line.Substring(0, 8));
                    }
                    //
                    for(int o = 0; o < test_num_of_epochs; o++)
                    {
                        current_line = inp_file_00.ReadLine();

                        test_state_00[o] = (int) Convert.ToInt64(current_line.Substring(0, 8));
                    }
                    //
                    //read ''alarm'' data
                    for(int o = 0; o < test_num_of_epochs; o++)
                    {
                        current_line = inp_file_00.ReadLine();
                    }
                    //
                    //read ''upperbound'' data
                    for(int o = 0; o < test_num_of_epochs; o++)
                    {
                        current_line = inp_file_00.ReadLine();
                    }
                    //
                    //read ''neighbourhood'' data
                    current_line = inp_file_00.ReadLine();
                    //
                    for(int o = 0; o < test_num_of_epochs; o++)
                    {
                        current_line = inp_file_00.ReadLine();

                        test_populationFrac_00[o] = (double) Convert.ToDouble(current_line.Substring(0, 8));
                    }
                    //
                    for(int o = 0; o < test_num_of_inOutbreak; o++)
                    {
                        current_line = inp_file_00.ReadLine();

                        test_inOutbreak_00[o] = (int) Convert.ToInt64(current_line.Substring(0, 8));
                    }
                    //
                    current_line = inp_file_00.ReadLine();
                    test_epochAsDate_00 = Convert.ToBoolean(current_line.Substring(0, 8));
                    current_line = inp_file_00.ReadLine();
                    test_multinomialTS_00 = Convert.ToBoolean(current_line.Substring(0, 8));

                    inp_file_00.Close();
                }
                catch
                {
                    Console.WriteLine("Cannot read surveillance time series data from file.");
                }

                //BEGIN Create a DOD-conform JSON object with readed data
                StringBuilder test_sb_00 = new StringBuilder();
                StringWriter test_sw_00 = new StringWriter(test_sb_00);

                using (JsonWriter test_writer_00 = new JsonTextWriter(test_sw_00))
                {
                    test_writer_00.Formatting = Formatting.Indented;

                    test_writer_00.WriteStartObject();

                    test_writer_00.WritePropertyName("epoch");
                    test_writer_00.WriteStartArray();
                    for (int o = 0; o < test_num_of_epochs; o++)
                    {
                        test_writer_00.WriteValue(test_epochs_00[o]);
                    }
                    test_writer_00.WriteEndArray();
                    //
                    test_writer_00.WritePropertyName("freq");
                    test_writer_00.WriteValue(test_freq_00);
                    //
                    test_writer_00.WritePropertyName("start");
                    test_writer_00.WriteStartArray();
                    test_writer_00.WriteValue(test_start_00[0]);
                    test_writer_00.WriteValue(test_start_00[1]);
                    test_writer_00.WriteEndArray();
                    //
                    test_writer_00.WritePropertyName("observed");
                    test_writer_00.WriteStartArray();
                    for (int o = 0; o < test_num_of_epochs; o++)
                    {
                        test_writer_00.WriteValue(test_observed_00[o]);
                    }
                    test_writer_00.WriteEndArray();
                    //
                    test_writer_00.WritePropertyName("state");
                    test_writer_00.WriteStartArray();
                    for (int o = 0; o < test_num_of_epochs; o++)
                    {
                        test_writer_00.WriteValue(test_state_00[o]);
                    }
                    test_writer_00.WriteEndArray();
                    //
                    test_writer_00.WritePropertyName("populationFrac");
                    test_writer_00.WriteStartArray();
                    for (int o = 0; o < test_num_of_epochs; o++)
                    {
                        test_writer_00.WriteValue(test_populationFrac_00[o]);
                    }
                    test_writer_00.WriteEndArray();
                    //
                    test_writer_00.WritePropertyName("inOutbreak");
                    test_writer_00.WriteStartArray();
                    for (int o = 0; o < test_num_of_inOutbreak; o++)
                    {
                        test_writer_00.WriteValue(test_inOutbreak_00[o]);
                    }
                    test_writer_00.WriteEndArray();
                    //
                    test_writer_00.WritePropertyName("epochAsDate");
                    test_writer_00.WriteValue(test_epochAsDate_00);
                    //
                    test_writer_00.WritePropertyName("multinomialTS");
                    test_writer_00.WriteValue(test_multinomialTS_00);

                    test_writer_00.WriteEndObject();
                }

                //BEGIN Write JSON-Object to JSON-File
                if (!true)
                {
                    File.WriteAllText(path_00 + out_file_name_00, test_sb_00.ToString());
                }
                //END Write JSON-Object to JSON-File

                //END Create a DOD-conform JSON object with readed data
            }
            //END Testing with a salBerlin_new data set

            //BEGINN RDotNet-Version der Einbindung des RKI-Algorithmus
            if (!true)
            {
                string path_01 = "O:\\git\\smics\\SmICS\\SmICS\\AQL\\DOD_Interface\\";
                string inp_file_name_01 = "DOD_Covid_19_Input_00000.dat";
                string current_line_01 = "";

                int num_of_epochs_rDotNet = 336;
                int[] epochs_rDotNet = new int[num_of_epochs_rDotNet];
                int freq_rDotNet = 7;
                int[] observed_rDotNet = new int[num_of_epochs_rDotNet];

                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("Trying RDotNet version.");
                try
                {
                    System.IO.StreamReader inp_file_01 = new System.IO.StreamReader(path_01 + inp_file_name_01);

                    for (int o = 0; o < num_of_epochs_rDotNet; o++)
                    {
                        current_line_01 = inp_file_01.ReadLine();
                        observed_rDotNet[o] = (int) Convert.ToInt64(current_line_01.Substring(0, 8));
                    }

                    for (int o = 0; o < num_of_epochs_rDotNet; o++)
                    {
                        current_line_01 = inp_file_01.ReadLine();
                        epochs_rDotNet[o] = (int) Convert.ToInt64(current_line_01.Substring(0, 8));
                    }

                    inp_file_01.Close();

                    string ausgabe_01 = REngineRunner.RunProceduresEngine(observed_rDotNet,
                                                                          epochs_rDotNet,
                                                                          freq_rDotNet,
                                                                          "virological");
                }
                catch (Exception e)
                {
                    System.Diagnostics.Debug.WriteLine(e.Message);
                }
                System.Diagnostics.Debug.WriteLine("After RDotNet version.");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");

                //

                //
            }
            //ENDE RDotNet-Version der Einbindung des RKI-Algorithmus

            //BEGIN Run R-Script with call of DOD-library and -procedures
            string ausgabe_00 = RScriptRunner.RunFromCmd(path_00 + file_name_01, path_02 + exec_name_01, rParameter);

            if (true)
            {
                System.Diagnostics.Debug.WriteLine(ausgabe_00);
                System.Diagnostics.Debug.WriteLine("");
                System.Diagnostics.Debug.WriteLine("");
            }

            StreamReader cur_inp_file = File.OpenText(path_00 + r_out_file_name);
            JsonTextReader cur_reader = new JsonTextReader(cur_inp_file);
            JObject o2 = (JObject) JToken.ReadFrom(cur_reader);
            cur_inp_file.Close();

            if (!true)
            {
                System.Diagnostics.Debug.WriteLine(o2.ToString());
                System.Diagnostics.Debug.WriteLine("");
            }

            decimal algo_posterior  = (decimal) o2["posterior"][0];
            double algo_pval        = (double) o2["pval"][0];
            decimal algo_timepoint  = (decimal) o2["timepoint"][0];
            decimal algo_observed   = (decimal) o2["observed"][0];
            decimal algo_mu0        = (decimal) o2["mu0"][0];
            decimal algo_mu1        = (decimal) o2["mu1"][0];
            string algo_id          = (string) o2["id"][0];
            decimal algo_offset     = (decimal) o2["offset"][0];
            decimal algo_dispersion = (decimal) o2["dispersion"][0];
            decimal algo_bic        = (decimal) o2["bic"][0];
            decimal algo_aic        = (decimal) o2["aic"][0];

            if (true)
            {
                System.Diagnostics.Debug.WriteLine(" posterior  " + algo_posterior);
                System.Diagnostics.Debug.WriteLine(" pval       " + algo_pval);
                System.Diagnostics.Debug.WriteLine(" timepoint  " + algo_timepoint);
                System.Diagnostics.Debug.WriteLine(" observed   " + algo_observed);
                System.Diagnostics.Debug.WriteLine(" mu0        " + algo_mu0);
                System.Diagnostics.Debug.WriteLine(" mu1        " + algo_mu1);
                System.Diagnostics.Debug.WriteLine(" id         " + algo_id);
                System.Diagnostics.Debug.WriteLine(" offset     " + algo_offset);
                System.Diagnostics.Debug.WriteLine(" dispersion " + algo_dispersion);
                System.Diagnostics.Debug.WriteLine(" bic        " + algo_bic);
                System.Diagnostics.Debug.WriteLine(" aic        " + algo_aic);
                System.Diagnostics.Debug.WriteLine("");
            }
            //END Run R-Script with call of DOD-library and -procedures
        }

        // This method calls RScriptRunner.
        //
        //CAUTION: Particularly this method doesn't use any AQL yet.
        //         It's only for local use.
        //
        // Input parameters:
        // path_of_r_script     [string] : Path to the R transfer script.
        // epochs_and_observed  [int]    : 2D array with [0]: epochs and [1]: observed.
        // num_of_epochs        [int]    : Number of epochs in the DOD STS Data Structure.
        // num_of_inOutbreak    [int]    : Number of items in a variable in the DOD STS Data Structure.
        // json_out_file_name   [string] : Output JSON-file name with items for the DOD STS Data Structure.
        //                                 Important: Must be the same as in R transfer file.
        // r_transfer_file_name [string] : Name of the R transfer file.
        // path_of_r_exec       [string] : Path to the Rscript.exe.
        // r_out_file_name      [string] : Name of the JSON-file with the DOD algorithm computation results generated by
        //                                 the R transfer file.
        //                                 Important: Must be the same as in R transfer file.
        // rParameter           [string] : Parameter for the DOD Algorithm.
        //
        public static JObject RunDODAlgorithmCovid19Extension(string path_of_r_script,
                                                           int[][] epochs_and_observed,
                                                           int num_of_epochs,
                                                           int num_of_inOutbreak,
                                                           string json_out_file_name,
                                                           string r_transfer_file_name,
                                                           string path_of_r_exec,
                                                           string r_out_file_name,
                                                           string rParameter)
        {
            //BEGIN Define Variables
            string path_00 = path_of_r_script; //"C:\\Users\\Nikolaus Kopernikus\\Ordner\\myDev\\0006_R\\";

            DateTime startingDate = (new DateTime(1970, 1, 1)).AddDays(epochs_and_observed[0][0]); //PW20210222__DateTime startingDate = (new DateTime(1970, 1, 1)).AddDays(epochs_and_observed[0/2][0]);
            int startingYear = startingDate.Year;
            int startingWeek = DateTimeFormatInfo.CurrentInfo.Calendar.GetWeekOfYear(startingDate, DateTimeFormatInfo.CurrentInfo.CalendarWeekRule, DateTimeFormatInfo.CurrentInfo.FirstDayOfWeek);

            int[] epochs_00 = epochs_and_observed[0]; //PW20210222__int[] epochs_00 = epochs_and_observed[0/2];
            int freq_00 = 7; //PW20210413__365; //PW20210217__365; //PW20210215__52; //PW20210211__0;
            int[] start_00 = {startingYear, startingWeek}; //PW20210215_1321_new int[2];
            int[] observed_00 = epochs_and_observed[1]; //PW20210222__int[] observed_00 = epochs_and_observed[1/3];

            string out_file_name_00 = json_out_file_name;

            //Variables for Running an R-Script
            string file_name_01 = r_transfer_file_name;

            string path_02 = path_of_r_exec;
            string exec_name_01 = "Rscript.exe";
            //END Define Variables

            //BEGIN Create a DOD-conform JSON object with readed data
            StringBuilder sb_00 = new StringBuilder();
            StringWriter sw_00 = new StringWriter(sb_00);

            using (JsonWriter writer_00 = new JsonTextWriter(sw_00))
            {
                writer_00.Formatting = Formatting.Indented;

                writer_00.WriteStartObject();

                writer_00.WritePropertyName("epoch");
                writer_00.WriteStartArray();
                for (int o = 0; o < num_of_epochs; o++)
                {
                    writer_00.WriteValue(epochs_00[o]);
                }
                writer_00.WriteEndArray();
                //
                writer_00.WritePropertyName("freq");
                writer_00.WriteValue(freq_00);
                //
                writer_00.WritePropertyName("observed");
                writer_00.WriteStartArray();
                for (int o = 0; o < num_of_epochs; o++)
                {
                    writer_00.WriteValue(observed_00[o]);
                }
                writer_00.WriteEndArray();

                writer_00.WriteEndObject();
            }

            //BEGIN Write JSON-Object to JSON-File
            //if (true && !true)
            if (true)
            {
                File.WriteAllText(path_00 + out_file_name_00, sb_00.ToString());
            }
            //END Write JSON-Object to JSON-File

            //END Create a DOD-conform JSON object with readed data

            //BEGIN Run R-Script with call of DOD-library and -procedures
            string ausgabe_00 = RScriptRunner.RunFromCmd(path_00 + file_name_01, path_02 + exec_name_01, rParameter);

            StreamReader cur_inp_file = File.OpenText(path_00 + r_out_file_name);
            JsonTextReader cur_reader = new JsonTextReader(cur_inp_file);
            JObject o2 = (JObject) JToken.ReadFrom(cur_reader);
            cur_inp_file.Close();

            if (true)
            {
                int cut_of_epochs = 32;
                decimal[] algo_posterior  = new decimal[num_of_epochs-cut_of_epochs];
                decimal[] algo_pValues  = new decimal[num_of_epochs-cut_of_epochs];
                DateTime[] algo_timeStamps  = new DateTime[num_of_epochs-cut_of_epochs];
                int[] algo_endemicLevels  = new int[num_of_epochs-cut_of_epochs];
                int[] algo_epidemicLevels  = new int[num_of_epochs-cut_of_epochs];
                int[] algo_upperBounds  = new int[num_of_epochs-cut_of_epochs];
                int[] algo_casesBelowThresholds  = new int[num_of_epochs-cut_of_epochs];
                int[] algo_casesAboveThresholds  = new int[num_of_epochs-cut_of_epochs];
                string[] algo_alarmGroups  = new string[num_of_epochs-cut_of_epochs];

                for(int o = 0; o < num_of_epochs-cut_of_epochs; o++)
                {
                    algo_posterior[o] = (decimal) o2["Ausbruchswahrscheinlichkeit"][o]; //PW20210419__algo_posterior[o] = (decimal) o2["posterior"][o];
                    algo_pValues[o] = (decimal) o2["p-Value"][o];
                    algo_timeStamps[o] = (DateTime) o2["Zeitstempel"][o];
                    algo_endemicLevels[o] = (int) o2["Endemisches Niveau"][o];
                    algo_epidemicLevels[o] = (int) o2["Epidemisches Niveau"][o];
                    algo_upperBounds[o] = (int) o2["Obergrenze"][o];
                    algo_casesBelowThresholds[o] = (int) o2["Faelle unter der Obergrenze"][o];
                    algo_casesAboveThresholds[o] = (int) o2["Faelle ueber der Obergrenze"][o];
                    algo_alarmGroups[o] = (string) o2["Klassifikation der Alarmfaelle"][o];
                }
                //
                /*for(int o = 0; o < 20; o++)
                {
                    System.Diagnostics.Debug.WriteLine("    {0}", algo_posterior[o]);
                }
                System.Diagnostics.Debug.WriteLine("");
                for(int o = 0; o < 20; o++)
                {
                    System.Diagnostics.Debug.WriteLine(algo_alarmGroups[o]);
                }
                System.Diagnostics.Debug.WriteLine("");
                for(int o = 0; o < 20; o++)
                {
                    System.Diagnostics.Debug.WriteLine("    {0}    {1}    {2}",
                                                       algo_timeStamps[o].Day,
                                                       algo_timeStamps[o].Month,
                                                       algo_timeStamps[o].Year);
                }*/
            }
            //END Run R-Script with call of DOD-library and -procedures

            return o2;
        }
    }

    /*
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    .
    */
}
