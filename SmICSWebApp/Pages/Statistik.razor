@page "/Statistik"

@using SmICSWebApp.Data
@using System.Collections.Generic;
@using System.ComponentModel.DataAnnotations
@using SmICSCoreLib.AQL.Patient_Stay.Count;

@inject DataService dataService

<div class=""></div>
<h3>Statistik (Prototyp)</h3>

@if (regionen == null)
{
    <p><em>Daten werden geladen...</em></p>
    <div class="spinner"></div>

    @*@if (@time >= @timeToWait)
    {
        <p><em>Keine Daten verfügbar!</em></p>
    }*@
}
else
{
    <div class="row">
        <br>
        <div class="col-6">
            <EditForm Model="@data">
                <div style="display: inline-flex; ">
                    <div>
                        <label>Bundesland: </label>
                        <InputSelect @bind-Value="data.bl" @onclick="@OnValueBl">
                            @foreach (var bundesland in Bundeslaender)
                                {
                                <option value="@bundesland"> @bundesland</option>}
                            }

                        </InputSelect>
                    </div>

                    <div>
                        <label>Region: </label>
                        <InputSelect @bind-Value="data.gen" @onclick="@OnValueGen">
                            @for (int i = 0; i < @regionen.features.Length; i++)
                                {
                                <option value="@regionen.features.ElementAt(i).districtAttributes.GEN">
                                    @regionen.features.ElementAt(i).districtAttributes.GEN
                                </option>
                                }
                        </InputSelect>
                    </div>
                </div>
            </EditForm>

            <br>
            <p>Stand @datum.Date.ToString("dd.MM.yyyy")</p>
        </div>
    </div>

    <div class="row">
        <div class="col-6">
            <p>Vergelich Region-Bundesland</p>
            <div>
                <table class="table table-bordered table-striped mb-0">
                    <thead class="">
                        <tr>
                            <th scope="col"></th>
                            <th scope="col">@aktuelleRegion.features.First().districtAttributes.GEN</th>
                            <th scope="col">@state.features.First().attributes.Bundesland</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th scope="row">Fallzahl</th>
                            <td>@aktuelleRegion.features.First().districtAttributes.cases</td>
                            <td>@state.features.First().attributes.Fallzahl</td>
                        </tr>
                        <tr>
                            <th scope="row">Fallzahl pro 100.000 Einwohner</th>
                            <td>@aktuelleRegion.features.First().districtAttributes.cases_per_100k </td>
                            <td>@state.features.First().attributes.FaellePro100000Ew</td>
                        </tr>

                        <tr>
                            <th scope="row">Fälle in der letzten 7 Tage</th>
                            <td>@aktuelleRegion.features.First().districtAttributes.cases7_lk</td>
                            <td>@state.features.First().attributes.cases7_bl</td>
                        </tr>
                        <tr>
                            <th scope="row">7-Tage-Inzidenz</th>
                            <td>@aktuelleRegion.features.First().districtAttributes.cases7_per_100k </td>
                            <td>@state.features.First().attributes.Faelle7BlPro100K</td>
                        </tr>
                        <tr>
                            <th scope="row">7-Tage-R-Wert</th>
                            <td> @rValue</td>
                            <td> @rValue</td>
                        </tr>
                        <tr>
                            <th scope="row">Verstorben</th>
                            <td> @aktuelleRegion.features.First().districtAttributes.deaths</td>
                            <td>@state.features.First().attributes.Todesfaelle</td>
                        </tr>
                        <tr>
                            <th scope="row">Verstorben der letzten 7 Tage</th>
                            <td> @aktuelleRegion.features.First().districtAttributes.death7_lk</td>
                            <td>@state.features.First().attributes.death7_bl</td>
                        </tr>
                        <tr>
                            <th scope="row">Genesen</th>
                            @* <td>@aktuelleRegion.features.First().districtAttributes.recovered</td>*@
                            <td>.k.A</td>
                            <td>.k.A</td>
                        </tr>
                        @*<tr>
                                <th scope="row">Nicht genesen</th>
                                <td> .k.A </td>
                                <td> .k.A</td>
                            </tr>*@
                    </tbody>
                </table>
            </div>
        </div>

        <div class="col-6">
            <br>
            <p>Fallzahlen im Krankenhaus</p>

            <div>
                <table class="table table-bordered table-striped mb-0">
                    <thead class="">
                        <tr>
                            <th scope="col">Aktuelle Fallzahlen</th>
                            <th scope="col">Fallzahl gesamt</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th scope="row">Laborbestätigt</th>
                            <td>@allPositivPat.Count()</td>
                        </tr>
                        <tr>
                            <th scope="row">Mitgebrachte Fälle</th>
                            <td>@anzahlFaelle</td>
                        </tr>
                        <tr>
                            <th scope="row">Nosokomiale Fälle</th>
                            <td> @patientsNoskumal.Count() </td>
                        </tr>
                        <tr>
                            <th scope="row">Anzahl positiver Tests</th>
                            <td>@allPositivTest.Count()</td>
                        </tr>
                        <tr>
                            <th scope="row">Anzahl negativer Tests</th>
                            <td>@allNegativPat.Count()</td>
                        </tr>

                    </tbody>
                </table>

            </div>

            <br>
            <p>Fallzahlen im Krankenhaus</p>

            <div>
                <table class="table table-bordered table-striped mb-0">
                    <thead class="">
                        <tr>
                            <th scope="col"> </th>
                            <th scope="col">Anzahl gesamt</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th scope="row">Anzahl aufgenommener Patienten</th>
                            <td>@allPositivPat.Count()</td>
                        </tr>
                        <tr>
                            <th scope="row">Anzahl Patiententage</th>
                            <td>@anzahlPatTage</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}


@code {
    StatistikData data = new StatistikData();
    //private DateTime time;
    //private DateTime timeToWait;
    private string rValue;
    private int anzahlFaelle;
    private int anzahlPatTage;
    public DateTime datum { get; set; } = DateTime.Now;
    private Data.District regionen;
    private Data.District aktuelleRegion;

    private Data.State state;
    private List<CountDataModel> allPositivTest;
    private List<CountDataModel> allNegativPat;
    private List<CountDataModel> allPositivPat = new List<CountDataModel>();
    private List<Patient> patientsNoskumal;

    private List<string> Bundeslaender = new List<string>{ "Baden-Württemberg", "Bayern", "Berlin" , "Brandenburg",
        "Bremen", "Hamburg", "Hessen", "Mecklenburg-Vorpommern", "Niedersachsen", "Nordrhein-Westfalen" , "Rheinland-Pfalz",
        "Saarland" , "Sachsen", "Sachsen-Anhalt", "Schleswig-Holstein", "Thüringen" };


    protected override async Task OnInitializedAsync()
    {
        //time = DateTime.Now;
        //timeToWait = time.AddSeconds(15);
        data.bl = "Baden-Württemberg";
        data.gen = "Stuttgart";

        await Task.Run(LoadRkiData);
        await Task.Run(LoadEhrData);
        await Task.Run(LoadRValue);

    }

    private void LoadRkiData()
    {
        System.Threading.Thread.Sleep(3000);

        regionen = dataService.GetDistricts("Baden-Württemberg");
        state = dataService.GetState("Baden-Württemberg");
        aktuelleRegion = dataService.GetDistrict("Stuttgart");
    }

    private void LoadEhrData()
    {
        allPositivTest = dataService.GetAllPositivTest();
        allPositivPat = dataService.GetPositivPat();
        allNegativPat = dataService.GetNegativPat();

        patientsNoskumal = dataService.GetNoskumalPat(allPositivTest);
        anzahlFaelle = allPositivPat.Count() - patientsNoskumal.Count();

        anzahlPatTage = dataService.PatStay(patientsNoskumal);
    }

    private void LoadRValue()
    {
        rValue = dataService.GetRValue(1);
        if (rValue == null)
        {
            rValue = ".k.A";
        }
    }

    public class StatistikData
    {
        [Required]
        public DateTime datum { get; set; }

        [Required]
        public string bl { get; set; }

        [Required]
        public string gen { get; set; }
    }

    private void OnValueBl()
    {
        regionen = dataService.GetDistricts(data.bl);
        string bl = regionen.features.First().districtAttributes.BL;
        if (data.bl == bl)
        {
            data.gen = regionen.features.First().districtAttributes.GEN;
            aktuelleRegion = dataService.GetDistrict(data.gen);
        }

        state = dataService.GetState(data.bl);
    }

    private void OnValueGen()
    {
        aktuelleRegion = dataService.GetDistrict(data.gen);
    }

}

